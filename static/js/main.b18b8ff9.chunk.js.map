{"version":3,"sources":["assets/images/back_ico.svg","assets/images/more_ico.svg","assets/images/usertive_logo.svg","assets/images/shuffle_ico.svg","assets/images/previous_ico.svg","assets/images/next_ico.svg","assets/images/repeat_ico.svg","assets/images/Play_active.png","assets/images/Play_inactive.png","assets/images/waveform.svg","assets/images/playlist_ico.svg","assets/images/cover.png","assets/images/unreleased_cover.png","assets/images/cover-1.png","components/Navbar/Navbar.js","components/TracksSlider/TrackCover/TrackCover.js","components/TracksSlider/TracksSlider.js","redux/actions/PlayerActions.js","components/Controls/Controls.js","components/BottomInfoBar/BottomInfoBar.js","components/Player/Player.js","App.js","serviceWorker.js","redux/reducers/PlayerReducer.js","redux/reducers/RootReducer.js","index.js"],"names":["module","exports","Navbar","className","src","BackIcon","alt","MoreIcon","Track","this","props","img","idx","currentTrack","active","UsertiveLogo","React","Component","TracksSlider","tracks","addSliderRef","covers","map","track","coverImage","key","ref","c","infinite","draggable","slidesToShow","speed","connect","state","player","dispatch","type","payload","Controls","trackDurationInterval","prevProps","prevState","trackPlaying","incrementDuration","setInterval","clearInterval","currentDuration","duration","shuffleActive","randomTrackNumber","Math","floor","random","length","goToTrack","slider","slickGoTo","repeatActive","repeatTrack","nextTrack","slickNext","value","mins","secs","durationProgress","currentDurationFormatted","formatSeconds","trackDurationFormatted","href","ShuffleIcon","onClick","shuffle","PreviousIcon","previousTrack","slickPrev","PlayActiveIcon","playPauseTrack","PlayInactiveIcon","NextIcon","RepeatIcon","repeat","style","width","Waveform","sliderRef","trackNumber","BottomInfoBar","nextTrackTitle","nextTrackDuration","nextTrackIndex","title","nextTrackDurationFormatted","PlaylistIcon","Player","author","App","Boolean","window","location","hostname","match","initState","Cover1","Cover2","Cover3","playerReducer","action","rootReducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b18b8ff9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/back_ico.6d8b1009.svg\";","module.exports = __webpack_public_path__ + \"static/media/more_ico.68d542b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/usertive_logo.2bd484f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/shuffle_ico.9cca0f11.svg\";","module.exports = __webpack_public_path__ + \"static/media/previous_ico.61530e1d.svg\";","module.exports = __webpack_public_path__ + \"static/media/next_ico.908e77ad.svg\";","module.exports = __webpack_public_path__ + \"static/media/repeat_ico.f24e6532.svg\";","module.exports = __webpack_public_path__ + \"static/media/Play_active.d522478d.png\";","module.exports = __webpack_public_path__ + \"static/media/Play_inactive.6760bda7.png\";","module.exports = __webpack_public_path__ + \"static/media/waveform.324e39ee.svg\";","module.exports = __webpack_public_path__ + \"static/media/playlist_ico.d560ea63.svg\";","module.exports = __webpack_public_path__ + \"static/media/cover.aa246fdc.png\";","module.exports = __webpack_public_path__ + \"static/media/unreleased_cover.a2195768.png\";","module.exports = __webpack_public_path__ + \"static/media/cover-1.8e344a79.png\";","import React from \"react\";\nimport \"./Navbar.scss\";\nimport BackIcon from \"../../assets/images/back_ico.svg\";\nimport MoreIcon from \"../../assets/images/more_ico.svg\";\n\nfunction Navbar() {\n  return (\n    <nav className=\"navbar\">\n      <img src={BackIcon} className=\"nav-item back-button\" alt=\"Go back\" />\n      <div className=\"nav-item title-container\">\n        <p className=\"title\">ALBUM</p>\n        <p className=\"subtitle\">Unreleased</p>\n      </div>\n      <img src={MoreIcon} className=\"nav-item more-button\" alt=\"More\" />\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./TrackCover.scss\";\n\nimport UsertiveLogo from \"../../../assets/images/usertive_logo.svg\";\n\nclass Track extends React.Component {\n  render() {\n    const { img, idx, currentTrack } = this.props;\n    const active = idx === currentTrack;\n\n    return (\n      <div\n        className={`track-cover ${active ? \"active\" : \"\"} ${idx < currentTrack ? \"previous\" : \"\"} ${\n          idx > currentTrack ? \"next\" : \"\"\n        }`}\n      >\n        <img src={img} alt=\"Track cover\" />\n        {active && (\n          <div className=\"logo-container\">\n            <img src={UsertiveLogo} className=\"usertive-logo\" alt=\"Usertive logo\" />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Track;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addSliderRef } from \"../../redux/actions/PlayerActions\";\nimport \"./TracksSlider.scss\";\nimport Track from \"./TrackCover/TrackCover\";\nimport Slider from \"react-slick\";\n\nclass TracksSlider extends React.Component {\n  render() {\n    const { tracks, currentTrack, addSliderRef } = this.props;\n\n    const sliderSettings = {\n      infinite: true,\n      draggable: false,\n      slidesToShow: 1,\n      speed: 300,\n    };\n\n    const covers = tracks.map((track, idx) => {\n      return <Track img={track.coverImage} idx={idx} currentTrack={currentTrack} key={idx} />;\n    });\n\n    return (\n      <section>\n        <Slider ref={(c) => addSliderRef(c)} {...sliderSettings}>\n          {covers}\n        </Slider>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  tracks: state.player.tracks,\n  currentTrack: state.player.currentTrack,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addSliderRef: (ref) => dispatch(addSliderRef(ref)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TracksSlider);\n","export const addSliderRef = (ref) => ({\n  type: \"ADD_SLIDER_REF\",\n  payload: ref,\n});\n\nexport const playPauseTrack = () => ({\n  type: \"PLAY_PAUSE_TRACK\",\n});\n\nexport const nextTrack = () => ({\n  type: \"NEXT_TRACK\",\n});\n\nexport const previousTrack = () => ({\n  type: \"PREVIOUS_TRACK\",\n});\n\nexport const shuffle = () => ({\n  type: \"SHUFFLE\",\n});\n\nexport const repeat = () => ({\n  type: \"REPEAT\",\n});\n\nexport const incrementDuration = () => ({\n  type: \"INCREMENT_CURRENT_DURATION\",\n});\n\nexport const repeatTrack = () => ({\n  type: \"REPEAT_TRACK\",\n});\n\nexport const goToTrack = (trackNumber) => ({\n  type: \"GO_TO_TRACK\",\n  payload: trackNumber,\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  playPauseTrack,\n  nextTrack,\n  previousTrack,\n  shuffle,\n  repeat,\n  incrementDuration,\n  repeatTrack,\n  goToTrack,\n} from \"../../redux/actions/PlayerActions\";\nimport \"./Controls.scss\";\n\nimport ShuffleIcon from \"../../assets/images/shuffle_ico.svg\";\nimport PreviousIcon from \"../../assets/images/previous_ico.svg\";\nimport NextIcon from \"../../assets/images/next_ico.svg\";\nimport RepeatIcon from \"../../assets/images/repeat_ico.svg\";\nimport PlayActiveIcon from \"../../assets/images/Play_active.png\";\nimport PlayInactiveIcon from \"../../assets/images/Play_inactive.png\";\nimport Waveform from \"../../assets/images/waveform.svg\";\n\nclass Controls extends React.Component {\n  componentDidMount() {\n    this.trackDurationInterval = null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Create interval for updating track duration progress (each second)\n    if (!prevProps.trackPlaying && this.props.trackPlaying) {\n      // Increment duration before the interval to avoid 1s delay\n      this.props.incrementDuration();\n      this.trackDurationInterval = setInterval(() => {\n        this.props.incrementDuration();\n      }, 1000);\n    }\n    // If track is not playing clear the interval\n    else if (prevProps.trackPlaying && !this.props.trackPlaying) {\n      if (this.trackDurationInterval !== null) {\n        clearInterval(this.trackDurationInterval);\n      }\n    }\n\n    // If the track is over go to the next one\n    if (this.props.currentDuration > this.props.tracks[this.props.currentTrack].duration) {\n      // If shuffle button is active choose random track other than the one currently playing\n      if (this.props.shuffleActive) {\n        let randomTrackNumber = -1;\n        do {\n          randomTrackNumber = Math.floor(Math.random() * this.props.tracks.length);\n        } while (randomTrackNumber === this.props.currentTrack);\n\n        this.props.goToTrack(randomTrackNumber);\n        this.props.slider.slickGoTo(randomTrackNumber);\n      }\n      // If repeat button is active replay track\n      else if (this.props.repeatActive) {\n        this.props.repeatTrack();\n      } else {\n        this.props.nextTrack();\n        this.props.slider.slickNext();\n      }\n    }\n  }\n\n  // Clear duration interval\n  componentWillUnmount() {\n    if (this.trackDurationInterval !== null) {\n      clearInterval(this.trackDurationInterval);\n    }\n  }\n\n  // Function for converting seconds to mm:ss format\n  formatSeconds(value) {\n    let mins = Math.floor((value / 60) % 60);\n    let secs = Math.floor(value - mins * 60);\n    if (mins < 10) mins = `0${mins}`;\n    if (secs < 10) secs = `0${secs}`;\n\n    return `${mins}:${secs}`;\n  }\n\n  render() {\n    const {\n      slider,\n      trackPlaying,\n      shuffleActive,\n      repeatActive,\n      tracks,\n      currentTrack,\n      currentDuration,\n    } = this.props;\n\n    // Calculate track duration progress\n    let durationProgress = (currentDuration / tracks[currentTrack].duration) * 100;\n    if (durationProgress > 100) durationProgress = 100;\n\n    // Format seconds to mm:ss\n    const currentDurationFormatted = this.formatSeconds(currentDuration);\n    const trackDurationFormatted = this.formatSeconds(tracks[currentTrack].duration);\n\n    return (\n      <section className=\"controls\">\n        <div className=\"controls-container\">\n          <a href=\"#!\" className=\"shuffle-btn\">\n            <img\n              src={ShuffleIcon}\n              onClick={() => this.props.shuffle()}\n              className={`control-item ${shuffleActive ? \"active\" : \"inactive\"}`}\n              alt=\"Shuffle play\"\n            />\n          </a>\n\n          <a href=\"#!\">\n            <img\n              src={PreviousIcon}\n              onClick={() => {\n                this.props.previousTrack();\n                slider.slickPrev();\n              }}\n              className=\"control-item\"\n              alt=\"Previus track\"\n            />\n          </a>\n\n          <a href=\"#!\" className=\"play-btn\">\n            <img\n              src={PlayActiveIcon}\n              className={`${trackPlaying ? \"active\" : \"inactive\"}`}\n              onClick={() => this.props.playPauseTrack()}\n              alt=\"Play\"\n            />\n            <img\n              src={PlayInactiveIcon}\n              className={`${trackPlaying ? \"inactive\" : \"active\"}`}\n              onClick={() => this.props.playPauseTrack()}\n              alt=\"Stop\"\n            />\n          </a>\n\n          <a href=\"#!\">\n            <img\n              src={NextIcon}\n              onClick={() => {\n                this.props.nextTrack();\n                slider.slickNext();\n              }}\n              className=\"control-item\"\n              alt=\"Next track\"\n            />\n          </a>\n\n          <a href=\"#!\">\n            <img\n              src={RepeatIcon}\n              onClick={() => this.props.repeat()}\n              className={`control-item ${repeatActive ? \"active\" : \"\"}`}\n              alt=\"Repeat this track\"\n            />\n          </a>\n        </div>\n\n        <div className=\"progress-bar-container\">\n          <p className=\"duration-info\">{currentDurationFormatted}</p>\n\n          <div className=\"progress-bar\">\n            <div className=\"progress\" style={{ width: `${durationProgress}%` }}></div>\n          </div>\n\n          <p className=\"duration-info\">{trackDurationFormatted}</p>\n        </div>\n\n        <img src={Waveform} className=\"waveform\" alt=\"Waveform\" />\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    slider: state.player.sliderRef,\n    trackPlaying: state.player.trackPlaying,\n    shuffleActive: state.player.shuffle,\n    repeatActive: state.player.repeat,\n    tracks: state.player.tracks,\n    currentTrack: state.player.currentTrack,\n    currentDuration: state.player.currentDuration,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    playPauseTrack: () => dispatch(playPauseTrack()),\n    nextTrack: () => dispatch(nextTrack()),\n    previousTrack: () => dispatch(previousTrack()),\n    shuffle: () => dispatch(shuffle()),\n    repeat: () => dispatch(repeat()),\n    incrementDuration: () => dispatch(incrementDuration()),\n    repeatTrack: () => dispatch(repeatTrack()),\n    goToTrack: (trackNumber) => dispatch(goToTrack(trackNumber)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./BottomInfoBar.scss\";\n\nimport PlaylistIcon from \"../../assets/images/playlist_ico.svg\";\n\nclass BottomInfoBar extends React.Component {\n  // Function for converting seconds to mm:ss format\n  formatSeconds(value) {\n    let mins = Math.floor((value / 60) % 60);\n    let secs = Math.floor(value - mins * 60);\n    if (mins < 10) mins = `0${mins}`;\n    if (secs < 10) secs = `0${secs}`;\n\n    return `${mins}:${secs}`;\n  }\n\n  render() {\n    const { tracks, currentTrack } = this.props;\n\n    let nextTrackIndex = currentTrack + 1;\n    let nextTrackTitle = \"\";\n    let nextTrackDuration = 0;\n\n    // Check if this is the last track, if yes then display first tracks info\n    if (nextTrackIndex >= tracks.length) nextTrackIndex = 0;\n    nextTrackTitle = tracks[nextTrackIndex].title;\n    nextTrackDuration = tracks[nextTrackIndex].duration;\n\n    // Format seconds to mm:ss\n    const nextTrackDurationFormatted = this.formatSeconds(nextTrackDuration);\n\n    return (\n      <section className=\"bottom-info-bar\">\n        <img src={PlaylistIcon} className=\"playlist-button\" alt=\"Playlist\" />\n\n        <div className=\"next-track-info\">\n          <p className=\"next-track\">Next</p>\n          <p className=\"next-track-title\">{nextTrackTitle}</p>\n        </div>\n\n        <p className=\"next-track-duration\">{nextTrackDurationFormatted}</p>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  tracks: state.player.tracks,\n  currentTrack: state.player.currentTrack,\n});\n\nexport default connect(mapStateToProps, null)(BottomInfoBar);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./Player.scss\";\n\nimport Navbar from \"../Navbar/Navbar\";\nimport TracksSlider from \"../TracksSlider/TracksSlider\";\nimport Controls from \"../Controls/Controls\";\nimport BottomInfoBar from \"../BottomInfoBar/BottomInfoBar\";\n\nclass Player extends React.Component {\n  render() {\n    const { tracks, currentTrack } = this.props;\n\n    return (\n      <section className=\"player\">\n        <div className=\"gradient\"></div>\n        <div className=\"bg-image\"></div>\n\n        <Navbar />\n        <TracksSlider />\n\n        <div className=\"track-info\">\n          <h1 className=\"track-title\">{tracks[currentTrack].title}</h1>\n          <p className=\"track-author\">{tracks[currentTrack].author}</p>\n        </div>\n\n        <Controls />\n        <BottomInfoBar />\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  tracks: state.player.tracks,\n  currentTrack: state.player.currentTrack,\n});\n\nexport default connect(mapStateToProps, null)(Player);\n","import React from \"react\";\n\nimport Player from \"./components/Player/Player\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Player />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Cover1 from \"../../assets/images/cover.png\";\nimport Cover2 from \"../../assets/images/unreleased_cover.png\";\nimport Cover3 from \"../../assets/images/cover-1.png\";\n\nconst initState = {\n  sliderRef: null,\n  tracks: [\n    { title: \"Feel The Steel\", author: \"Steel Panther\", coverImage: Cover1, duration: 218 },\n    { title: \"Self Conscious\", author: \"Kanye West\", coverImage: Cover2, duration: 160 },\n    { title: \"Livin' In A Movie\", author: \"Kanye West\", coverImage: Cover3, duration: 217 },\n  ],\n  currentTrack: 0,\n  currentDuration: 0,\n  trackPlaying: false,\n  repeat: false,\n  shuffle: false,\n};\n\nconst playerReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"PLAY_PAUSE_TRACK\":\n      return {\n        ...state,\n        trackPlaying: !state.trackPlaying,\n      };\n\n    case \"NEXT_TRACK\":\n      let nextTrack = state.currentTrack + 1;\n      if (nextTrack > state.tracks.length - 1) {\n        nextTrack = 0;\n      }\n\n      return {\n        ...state,\n        currentTrack: nextTrack,\n        currentDuration: 0,\n      };\n\n    case \"PREVIOUS_TRACK\":\n      let previousTrack = state.currentTrack - 1;\n      if (previousTrack < 0) {\n        previousTrack = state.tracks.length - 1;\n      }\n\n      return {\n        ...state,\n        currentTrack: previousTrack,\n        currentDuration: 0,\n      };\n\n    case \"ADD_SLIDER_REF\":\n      return {\n        ...state,\n        sliderRef: action.payload,\n      };\n\n    case \"SHUFFLE\":\n      return {\n        ...state,\n        shuffle: !state.shuffle,\n      };\n\n    case \"REPEAT\":\n      return {\n        ...state,\n        repeat: !state.repeat,\n      };\n\n    case \"INCREMENT_CURRENT_DURATION\":\n      return {\n        ...state,\n        currentDuration: state.currentDuration + 1,\n      };\n\n    case \"REPEAT_TRACK\":\n      return {\n        ...state,\n        currentDuration: 0,\n      };\n\n    case \"GO_TO_TRACK\":\n      return {\n        ...state,\n        currentTrack: action.payload,\n        currentDuration: 0,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default playerReducer;\n","import { combineReducers } from \"redux\";\n\nimport playerReducer from \"./PlayerReducer\";\n\nconst rootReducer = combineReducers({\n  player: playerReducer,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./redux/reducers/RootReducer\";\n\n// Redux store creation\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}